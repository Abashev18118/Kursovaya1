// <auto-generated />
using System;
using Kursovaya1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kursovaya1.Migrations
{
    [DbContext(typeof(Contekst))]
    [Migration("20240523202952_end12")]
    partial class end12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kursovaya1.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("Kursovaya1.Composition_of_the_order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<double>("Summ")
                        .HasColumnType("double precision");

                    b.Property<string>("Wishes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("compositions");
                });

            modelBuilder.Entity("Kursovaya1.Customer_Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Client_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Order_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderId");

                    b.ToTable("Customer_Orders");
                });

            modelBuilder.Entity("Kursovaya1.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Cost_price")
                        .HasColumnType("double precision");

                    b.Property<string>("named")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("dishes");
                });

            modelBuilder.Entity("Kursovaya1.Dish_margin_of_dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Dish_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Mark_up_of_the_dishId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Mark_up_of_the_dish_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("Mark_up_of_the_dishId");

                    b.ToTable("Dish_Margin_Of_Dishes");
                });

            modelBuilder.Entity("Kursovaya1.Mark_up_of_the_dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("extra_charge")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("mark_Up_Of_The_Dishes");
                });

            modelBuilder.Entity("Kursovaya1.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name_menu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("number_menu")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("menues");
                });

            modelBuilder.Entity("Kursovaya1.Menu_Mark_up_of_dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Mark_up_of_the_dishId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Mark_up_of_the_dish_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Menu_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Mark_up_of_the_dishId");

                    b.HasIndex("MenuId");

                    b.ToTable("Menu_Mark_Up_Of_Dishes");
                });

            modelBuilder.Entity("Kursovaya1.Newhall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName_LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("grafikwaiter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("number_of_hall")
                        .HasColumnType("integer");

                    b.Property<int>("number_of_tables")
                        .HasColumnType("integer");

                    b.Property<double>("square")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("newhalls");
                });

            modelBuilder.Entity("Kursovaya1.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date_of_Order")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number_of_Order")
                        .HasColumnType("integer");

                    b.Property<string>("Order_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Order_amount")
                        .HasColumnType("double precision");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Restaurant_hall")
                        .HasColumnType("integer");

                    b.Property<int>("TableNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Kursovaya1.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("capacity")
                        .HasColumnType("integer");

                    b.Property<double>("rating")
                        .HasColumnType("double precision");

                    b.Property<int>("res_number")
                        .HasColumnType("integer");

                    b.Property<string>("type_of_hall")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("restaurant");
                });

            modelBuilder.Entity("Kursovaya1.Restaurant_hall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName_LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("grafikwaiter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("number_of_hall")
                        .HasColumnType("integer");

                    b.Property<int>("number_of_tables")
                        .HasColumnType("integer");

                    b.Property<double>("square")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("halls");
                });

            modelBuilder.Entity("Kursovaya1.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("number_of_possible_places")
                        .HasColumnType("integer");

                    b.Property<int>("number_of_table")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tables");
                });

            modelBuilder.Entity("Kursovaya1.Waiter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.Property<int>("Service_Hall")
                        .HasColumnType("integer");

                    b.Property<string>("Service_tables")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("waiters");
                });

            modelBuilder.Entity("Kursovaya1.Waiter_Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Table_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Waiters_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("WaiterId");

                    b.ToTable("Waiter_Tables");
                });

            modelBuilder.Entity("Kursovaya1.Waiter_s_schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("End_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Restaurant_hallid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Start_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Waiterid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Restaurant_hallid")
                        .IsUnique();

                    b.HasIndex("Waiterid");

                    b.ToTable("shedules");
                });

            modelBuilder.Entity("Kursovaya1.Waiter_s_schedule1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("End_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Restaurant_jal")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Waiter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("shedules1");
                });

            modelBuilder.Entity("Kursovaya1.Customer_Order", b =>
                {
                    b.HasOne("Kursovaya1.Client", "Client")
                        .WithMany("Customer_Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kursovaya1.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Kursovaya1.Dish_margin_of_dish", b =>
                {
                    b.HasOne("Kursovaya1.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kursovaya1.Mark_up_of_the_dish", "Mark_up_of_the_dish")
                        .WithMany()
                        .HasForeignKey("Mark_up_of_the_dishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Mark_up_of_the_dish");
                });

            modelBuilder.Entity("Kursovaya1.Menu_Mark_up_of_dish", b =>
                {
                    b.HasOne("Kursovaya1.Mark_up_of_the_dish", "Mark_up_of_the_dish")
                        .WithMany()
                        .HasForeignKey("Mark_up_of_the_dishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kursovaya1.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark_up_of_the_dish");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Kursovaya1.Waiter_Table", b =>
                {
                    b.HasOne("Kursovaya1.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kursovaya1.Waiter", "Waiter")
                        .WithMany("Waiter_Tables")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Kursovaya1.Waiter_s_schedule", b =>
                {
                    b.HasOne("Kursovaya1.Restaurant_hall", "Restaurant_hall")
                        .WithOne("Waiter_s_schedule")
                        .HasForeignKey("Kursovaya1.Waiter_s_schedule", "Restaurant_hallid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kursovaya1.Waiter", "Waiter")
                        .WithMany("shedules")
                        .HasForeignKey("Waiterid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant_hall");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Kursovaya1.Client", b =>
                {
                    b.Navigation("Customer_Orders");
                });

            modelBuilder.Entity("Kursovaya1.Restaurant_hall", b =>
                {
                    b.Navigation("Waiter_s_schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("Kursovaya1.Waiter", b =>
                {
                    b.Navigation("Waiter_Tables");

                    b.Navigation("shedules");
                });
#pragma warning restore 612, 618
        }
    }
}
